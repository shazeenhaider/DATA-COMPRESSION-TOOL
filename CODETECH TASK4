#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Compresses a file using (RLE)
// Example: "AAABBB" --> "A3B3"
void compressFile(const char* inputFile, const char* outputFile) {
    // Open input and output files
    FILE *in = fopen(inputFile, "r");//file name input 
    FILE *out = fopen(outputFile, "w");//file name output

    // Check if files opened successfully
    if (!in || !out) {
        printf("Error\n");
        return;
    }

    char prev, curr;  // Track current and previous characters
    int count = 1;     // Counting character 
    // Read first character to start
    prev = fgetc(in);
    if (prev == EOF) {
        printf("Input file is empty.\n");
        fclose(in);
        fclose(out);
        return;
    }

    // Process each character in the file
    while ((curr = fgetc(in)) != EOF) {
        if (curr == prev) {
            // If same as previous character,  count++
            count++;
        } else {
            // When character changes, write the previous character and its count
            fprintf(out, "%c%d", prev, count);
            prev = curr;
            count = 1;  // Reset count for new character
        }
    }
    // Write the last character sequence before EOF
    fprintf(out, "%c%d", prev, count);

    // Clean up and close files
    fclose(in);
    fclose(out);
    printf("Compression complete. Output written to '%s'\n", outputFile);
}

// Decompresses a file that was compressed with RLE
// Example: "A3B3" becomes "AAABBB"
void decompressFile(const char* inputFile, const char* outputFile) {
    // Open input and output files
    FILE *in = fopen(inputFile, "r");
    FILE *out = fopen(outputFile, "w");

    // Check if files opened successfully
    if (!in || !out) {
        printf("Error opening file.\n");
        return;
    }

    char ch;    // Current character to repeat
    int count;  // How many times to repeat it

    // Process each character-count pair
    while ((ch = fgetc(in)) != EOF) {
        // Read the number that follows the character
        if (fscanf(in, "%d", &count) != 1) {
            printf("Invalid format in compressed file.\n");
            fclose(in);
            fclose(out);
            return;
        }
        // Write the character 'count' times
        for (int i = 0; i < count; i++) {
            fputc(ch, out);
        }
    }

    // Clean up and close files
    fclose(in);
    fclose(out);
    printf("Decompression complete. Output written to '%s'\n", outputFile);
}

// Main menu for the RLE tool
int main() {
    int choice;
    char inputFile[100], outputFile[100];

    // Display menu options
    printf("Run-Length Encoding (RLE) Tool\n");
    printf("1. Compress File\n");
    printf("2. Decompress File\n");
    printf("Enter choice: ");
    scanf("%d", &choice);

    // Get file names from user
    printf("Enter input file name: ");
    scanf("%s", inputFile);
    printf("Enter output file name: ");
    scanf("%s", outputFile);

    // Execute chosen operation
    if (choice == 1) {
        compressFile(inputFile, outputFile);
    } else if (choice == 2) {
        decompressFile(inputFile, outputFile);
    } else {
        printf("Invalid choice.\n");
    }

    return 0;
}
